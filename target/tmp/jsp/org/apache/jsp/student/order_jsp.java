/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.16.v20190411
 * Generated at: 2019-04-19 07:00:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.student;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class order_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/D:/repository/org/apache/taglibs/taglibs-standard-impl/1.2.5/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425949870000L));
    _jspx_dependants.put("file:/D:/repository/org/apache/taglibs/taglibs-standard-impl/1.2.5/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1555313481377L));
    _jspx_dependants.put("/student/../common.jsp", Long.valueOf(1555570279237L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');

String path = request.getContextPath();
String basePath = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+path+"/";

      out.write(" \n");
      out.write("<base href=\"");
      out.print(basePath);
      out.write("\">\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(basePath );
      out.write("js/jquery.min.js\"></script>\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html >\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n");
      out.write("    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\t\n");
      out.write("\t<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\t\n");
      out.write("\t<meta name=\"format-detection\" content=\"telephone=no\">\t\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.print(basePath);
      out.write("assets/css/layui.css\">\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.print(basePath);
      out.write("assets/css/view.css\"/>\n");
      out.write("  \n");
      out.write("    <link rel=\"icon\" href=\"/favicon.ico\">\n");
      out.write("    <title>管理后台</title>\n");
      out.write("    <style>\n");
      out.write("        html,body{\n");
      out.write("            height:100%;\n");
      out.write("            width:100%;\n");
      out.write("        }\n");
      out.write("\t\n");
      out.write("\t\t#container{\n");
      out.write("\t\t  \theight:100%;\n");
      out.write("        width:100%;\n");
      out.write("\t\t}\n");
      out.write("    .btn{\n");
      out.write("            width:14em;\n");
      out.write("            margin-left:3.2rem;  \n");
      out.write("            margin-top: 0.8rem; \n");
      out.write("        }\n");
      out.write("        .circalOut{\n");
      out.write("           width: 100px;\n");
      out.write("           height: 100px;\n");
      out.write("           border-radius: 50%;\n");
      out.write("           background: orange;\n");
      out.write("           position: relative;\n");
      out.write("           margin:auto;\n");
      out.write("          \n");
      out.write("       }\n");
      out.write("       .circalInner{\n");
      out.write("           width: 80px;\n");
      out.write("           height: 80px;\n");
      out.write("           border-radius: 50%;\n");
      out.write("           background: #999;\n");
      out.write("           text-align: center;\n");
      out.write("           padding-top:25px;\n");
      out.write("           box-sizing:border-box;\n");
      out.write("           position: absolute;\n");
      out.write("           top: 50%;\n");
      out.write("           left: 50%;\n");
      out.write("           transform: translate(-50%,-50%);\n");
      out.write("       }\n");
      out.write("       .air_top,.air_bottom{\n");
      out.write("            display: flex;\n");
      out.write("           text-align: center\n");
      out.write("       }\n");
      out.write("     \n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body class=\"layui-view-body\">\n");
      out.write("    <div class=\"layui-content\" id=\"box\" style=\"display:none\">\n");
      out.write("       <div class=\"layui-content\" id=\"AirDetail\" style=\"width:60%;margin:auto;padding:10px 0px\">\n");
      out.write("         <div class=\"air_top\">\n");
      out.write("                <div class=\"circalOut\">\n");
      out.write("                    <div class=\"circalInner\">\n");
      out.write("                          PM2.5 \n");
      out.write("                         <div class=\"PM25\">\n");
      out.write("                            \n");
      out.write("                         </div>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"circalOut\">\n");
      out.write("                    <div class=\"circalInner\">\n");
      out.write("                         PM10\n");
      out.write("                         <div class=\"PM10\">\n");
      out.write("                            \n");
      out.write("                         </div>\n");
      out.write("                    </div>\n");
      out.write("                 </div>\n");
      out.write("                 <div class=\"circalOut\" >\n");
      out.write("                     <div class=\"circalInner\">\n");
      out.write("                          CO\n");
      out.write("                        <div class=\"CO\">\n");
      out.write("                            \n");
      out.write("                         </div>\n");
      out.write("                      </div>\n");
      out.write("                 </div>\n");
      out.write("         </div>\n");
      out.write("          <div class=\"air_bottom\" style=\"margin-top:10%\">\n");
      out.write("                <div class=\"circalOut\">\n");
      out.write("                    <div class=\"circalInner\">\n");
      out.write("                         NO2\n");
      out.write("                        <div class=\"NO2\">\n");
      out.write("                            \n");
      out.write("                         </div>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"circalOut\">\n");
      out.write("                    <div class=\"circalInner\">\n");
      out.write("                       O3\n");
      out.write("                      <div class=\"O3\">\n");
      out.write("                            \n");
      out.write("                         </div>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"circalOut\">\n");
      out.write("                    <div class=\"circalInner\">\n");
      out.write("                       SO2\n");
      out.write("                       <div class=\"SO2\">\n");
      out.write("                            \n");
      out.write("                         </div>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("          </div>\n");
      out.write("         </div>\n");
      out.write("     </div>\n");
      out.write(" <div class=\"wrapper\">\n");
      out.write("\t<div id=\"container\"></div>\n");
      out.write("\t\n");
      out.write("  </div>\n");
      out.write("  \n");
      out.write("\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\" src=\"http://webapi.amap.com/maps?v=1.4.14&key=4f4388a14723c2fc91b750e5f9b0ce33&plugin=AMap.Geocoder\"></script>\n");
      out.write("<script src=\"");
      out.print(basePath);
      out.write("assets/layui.all.js\"></script>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write(" let layer = null\n");
      out.write(" let $ = null\n");
      out.write(" let city = ''\n");
      out.write(" layui.use('layer', function(){ layer = layui.layer,$ = layui.$ });\n");
      out.write("    var map = new AMap.Map(\"container\", {\n");
      out.write("        resizeEnable: true,\n");
      out.write("\t\t  center: [114.147977,30.681939],\n");
      out.write("          size:11\n");
      out.write("    });\n");
      out.write("    \n");
      out.write("    getMarkers()\n");
      out.write("\n");
      out.write("    //发送请求获取站点 并且 标注到地图上\n");
      out.write("    function getMarkers(){\n");
      out.write("        $.ajax({\n");
      out.write("\t        url : \"");
      out.print(basePath);
      out.write("city/findAll\",\n");
      out.write("\t        dataType : \"json\",\n");
      out.write("\t        success : function(res) {\n");
      out.write("            \tlet requestData = res\n");
      out.write("            \tconsole.log(res)\n");
      out.write("             //jfong 为后台返回数据\n");
      out.write("\t             var marker;\t\t\n");
      out.write("\t          \t for(var i=0 ; i< requestData.length;i++){\n");
      out.write("\t\t            \tvar jfong=[ requestData[i].lat,requestData[i].lon];\t\n");
      out.write("\t\t\t          \tmarker = new AMap.Marker({\n");
      out.write("\t\t\t              position: jfong,\n");
      out.write("\t\t\t              zIndex: 101,\n");
      out.write("\t\t\t              map:map,\n");
      out.write("                          icon: 'http://a.amap.com/jsapi_demos/static/demo-center/icons/poi-marker-default.png',\n");
      out.write("                         // offset: new AMap.Pixel(-13, -30),\n");
      out.write("                         // 设置是否可拖拽\n");
      out.write("                         draggable: false,\n");
      out.write("                         cursor: 'move'\n");
      out.write("\t\t\t              \t});\t\n");
      out.write("\t\t                 marker.setMap(map);\t\n");
      out.write("\t\t            \t marker.city = requestData[i].city; //赋值站点名称\n");
      out.write("\t\t                 marker.on('click', function(e){\n");
      out.write("\t\t                \tcity = e.target.city\n");
      out.write("                            openDilog()\n");
      out.write("\t\t            \t });\n");
      out.write("\t           \t }\t// for-end\n");
      out.write("             }\n");
      out.write("\t\t\n");
      out.write("        }) //\tAjax结束\n");
      out.write("\n");
      out.write("      }\n");
      out.write("    function getAirData(){\n");
      out.write("    \t//次数据应该为接口返回数据\n");
      out.write("    \tlet result =   {\n");
      out.write("    \t\t  \"PM2.5\": \"53\",\n");
      out.write("    \t\t  \"PM10\": \"100\",\n");
      out.write("    \t\t  \"CO\": \"0.6\",\n");
      out.write("    \t\t  \"NO2\": \"42\",\n");
      out.write("    \t\t  \"O3\": \"98\",\n");
      out.write("    \t\t  \"SO2\": \"15\",\n");
      out.write("    \t}\n");
      out.write("    \t$('.PM25').html(result['PM2.5'])\n");
      out.write("    \t$('.PM10').html(result['PM10'])\n");
      out.write("    \t$('.CO').html(result['CO'])\n");
      out.write("    \t$('.NO2').html(result['NO2'])\n");
      out.write("    \t$('.O3').html(result['O3'])\n");
      out.write("    \t$('.SO2').html(result['SO2'])\n");
      out.write("    \t//获取空气质量接口 暂时报错 \n");
      out.write("        /*$.ajax({\n");
      out.write("\t        url : \"");
      out.print(basePath);
      out.write("data/taskSearch\",\n");
      out.write("\t        dataType : \"json\",\n");
      out.write("\t        data:JSON.stringify({city:city}),\n");
      out.write("            success : function(res) {\n");
      out.write("            \tlet requestData = res\n");
      out.write("           },\n");
      out.write("          \t\n");
      out.write("\t\t\n");
      out.write("        }) *///\tAjax结束\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function openDilog(){\n");
      out.write("       let timer = 0\n");
      out.write("       layer.open({\n");
      out.write("         type: 1\n");
      out.write("        ,title: false //不显示标题栏\n");
      out.write("        ,closeBtn: true\n");
      out.write("        ,area: '800px'\n");
      out.write("        ,shade: 0.8\n");
      out.write("        ,id: 'LAY_layuipro' //设定一个id，防止重复弹出\n");
      out.write("        ,btn: ['确定']\n");
      out.write("        ,btnAlign: 'c'\n");
      out.write("        ,moveType: 1 //拖拽模式，0或者1\n");
      out.write("        ,content: $(\"#box\")\n");
      out.write("        ,yes: function(layero){\n");
      out.write("           layer.close(1);\n");
      out.write("           clearInterval(timer)\n");
      out.write("        },\n");
      out.write("        success:function(){\n");
      out.write("        \ttimer = setInterval(\"getAirData()\",1000)  //1000 获取空气数据的 周期 1000表示1秒\n");
      out.write("        }\n");
      out.write("        ,end:function(){\n");
      out.write("           layer.close(0) \n");
      out.write("           clearInterval(timer)\n");
      out.write("        }\n");
      out.write("      });\n");
      out.write("    \n");
      out.write("    }\n");
      out.write("\t\n");
      out.write("\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
